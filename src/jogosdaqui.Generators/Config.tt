<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="$(SolutionDir)/packages/HelperSharp.0.0.2.7/lib/net35/HelperSharp.dll" #>
<#@ assembly name="$(SolutionDir)/jogosdaqui.Domain/bin/Debug/jogosdaqui.Domain.dll" #>
<#@ assembly name="$(SolutionDir)/references/Skahal.Infrastructure.Framework.dll" #>
<#@ import namespace="jogosdaqui.Domain.Articles" #> 
<#@ import namespace="jogosdaqui.Domain.Games" #> 
<#@ import namespace="jogosdaqui.Domain.Platforms" #> 
<#@ import namespace="jogosdaqui.Domain.Companies" #> 
<#@ import namespace="jogosdaqui.Domain.Languages" #> 
<#@ import namespace="jogosdaqui.Domain.Persons" #>  
<#@ import namespace="jogosdaqui.Domain.Tags" #>  
<#@ import namespace="jogosdaqui.Domain.Evaluations" #>  
<#@ import namespace="System.Reflection" #>  
<#@ import namespace="System.Linq" #>   
<#@ import namespace="System.Collections.Generic" #>   
<#@ import namespace="Skahal.Infrastructure.Framework" #>
<#@ import namespace="HelperSharp" #>
   
<#+ 
class GenEntity
{
	public string Name;
	public string LowerName;
	public string Namespace;
	public string PluralName;
	public string ParameterName;
	public string VariableName;
	public bool HasImplementedIRepository;
	public Type Type;
	
	public bool HasProperty(string name)
	{
		return Type.GetProperty(name) != null;
	}
}
  
Type[] modelsType = new Type[]     
{   
	typeof(Game), 
	typeof(Evaluation),
	typeof(Platform),
	typeof(Company),
	typeof(Language),
	typeof(Person),	
	typeof(Comment),
	typeof(Event),
	typeof(Interview),
	typeof(News),	
	typeof(Preview),
	typeof(Review),
	typeof(Tag),
	typeof(AppliedTag)
	
};

string[] domainUnitTestsIgnoreMethods = new string[]
{
	"SaveAppliedTag_AppliedTagDoesNotExists_Created",
	"SaveAppliedTag_AppliedTagDoesExists_Updated",
	"SaveCompany_CompanyDoesNotExists_Created",
	"SaveGame_GameDoesNotExists_Created"
};
 
void RunForEachModel(Action<GenEntity> action)
{ 
	foreach(var t in modelsType)   
	{   
		var model = new GenEntity(); 
		model.Type = t;		
		model.Name = t.Name;  
		model.LowerName = model.Name.ToLowerInvariant(); 
		model.ParameterName = GetParameterName(model.LowerName);
		model.VariableName = model.ParameterName;
		model.Namespace = t.Namespace;
		model.PluralName = model.Name;
		  
		if(model.Name.EndsWith("y")) 
		{
			model.PluralName = model.Name.Substring(0, model.Name.Length - 1) + "ies";
		}   
		else if(!model.Name.EndsWith("s"))	
		{    
			model.PluralName = model.Name + "s"; 
		}
		
		model.HasImplementedIRepository = Type.GetType(t.Namespace + ".I" + model.Name + "Repository, jogosdaqui.Domain.dll") != null;

		action(model); 
	}
}

private string GetParameterName(string lowerName)
{
	if(lowerName.Equals("event"))
	{
		return "@event";
	}
	
	return lowerName;
}

bool CanGenerateDomainUnitTestMethod(string methodName)
{
	return !domainUnitTestsIgnoreMethods.Contains(methodName);
}

string GetDomainServiceInheritance(GenEntity genEntity)
{
	if(genEntity.Namespace.Contains("Articles") 
	&& !genEntity.Name.Equals("Comment")
	&& !genEntity.Name.Equals("EventSource"))
	{
		return "ArticleServiceBase<{0}, I{0}Repository>".With(genEntity.Name);
	}
	else {
		return "ServiceBase<{0}, long, I{0}Repository, IUnitOfWork<long>>".With(genEntity.Name);
	}
}
#>
