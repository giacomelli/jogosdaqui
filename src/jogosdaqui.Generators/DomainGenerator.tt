<#@ include file="Config.tt" #>   
  
#region Usings    
using System;  
using System.Collections.Generic;    
using System.IO;        
using System.Linq;    
using jogosdaqui.Domain.Games; 
using jogosdaqui.Domain.Platforms; 
using Skahal.Infrastructure.Framework.Commons;
using Skahal.Infrastructure.Framework.Repositories;
using HelperSharp; 
using KissSpecifications; 
#endregion        
       
<#  
RunForEachModel((e) => 
{
	if(e.HasImplementedIRepository)    
	{ 
#>   
namespace <#=e.Namespace#>
{
	public partial interface I<#=e.Name#>Repository : IRepository<<#=e.Name#>, long>
	{
	<#
	foreach(var otherType in modelsType.Where(mt => mt != e.Type)) 
	{  
	break;
		var otherTypeProperties = otherType.GetProperties().Where(t1 => t1.PropertyType.IsGenericType).Distinct(); 
	
		foreach(var p in otherTypeProperties)
		{  
			if(p.PropertyType.IsGenericType) 
			{
				var propertyName = otherType.Name;	  
				var propertyType = p.PropertyType.GetGenericArguments()[0].Name;
				var argumentName = e.Name.ToLowerInvariant();
				
				if(propertyType.Equals(e.Type.Name)) 
				{  
#> 
		IList<<#=propertyName#>> FindAll<#=propertyName#>s(<#=propertyType#> <#=argumentName#>);
		int CountAll<#=propertyName#>s(<#=propertyType#> <#=argumentName#>);
	
<#				}
			}
		}
	}  
#>
	}

	// <summary>
	/// Domain layer <#=e.LowerName#> service.
	/// </summary>
	public partial class <#=e.Name#>Service
	{ 
		#region Fields	 
        private I<#=e.Name#>Repository m_repository;
        private IUnitOfWork<long> m_unitOfWork; 
		#endregion 
		  
		#region Constructors 
      	/// <summary>
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=e.PluralName#>. <#=e.Name#>Service"/> class.
		/// </summary>
		public  <#=e.Name#>Service() 
			: this(DependencyService.Create<I<#=e.Name#>Repository>(), DependencyService.Create<IUnitOfWork<long>>())
		{
		} 

		/// <summary>
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=e.PluralName#>. <#=e.Name#>Service"/> class.
		/// </summary>
		/// <param name="<#=e.LowerName#>Repository"> <#=e.Name#> repository.</param>
		/// <param name="unitOfWork">Unit of work.</param>
		public  <#=e.Name#>Service(I<#=e.Name#>Repository <#=e.LowerName#>Repository, IUnitOfWork<long> unitOfWork)
		{
			m_repository = <#=e.LowerName#>Repository; 
			m_unitOfWork = unitOfWork;
			m_repository.SetUnitOfWork (m_unitOfWork);
		}
        #endregion
		
		#region Methods
		
		/// <summary>
		/// Gets the <#=e.LowerName#> by key.
		/// </summary>
		/// <returns>The <#=e.LowerName#> by key.</returns>
		/// <param name="key">The key.</param>
		public <#=e.Name#> Get<#=e.Name#>ByKey(long key)
		{
			return m_repository.FindAll (g => g.Key == key).FirstOrDefault ();
		}
		
		/// <summary>
		/// Gets all <#=e.PluralName#>. 
		/// </summary>
		/// <returns>The all <#=e.PluralName#>.</returns>
		public IList<<#=e.Name#>> GetAll<#=e.PluralName#>()
		{
			return m_repository.FindAll(g => true).ToList();
		}
		
		/// <summary>
		/// Counts all <#=e.PluralName#>.
		/// </summary>
		public long CountAll<#=e.PluralName#>() 
		{ 
			return m_repository.CountAll (g => true); 
		}

		/// <summary>
		/// Saves the <#=e.LowerName#>.
		/// </summary>
		/// <param name="<#=e.LowerName#>">The <#=e.LowerName#>.</param>
		public void Save<#=e.Name#>(<#=e.Name#> <#=e.LowerName#>)
		{
			ExceptionHelper.ThrowIfNull ("<#=e.LowerName#>", <#=e.LowerName#>);

			m_repository [<#=e.LowerName#>.Key] = <#=e.LowerName#>;

			m_unitOfWork.Commit (); 
		}

		/// <summary>
		/// Executes the deletion specification.
		/// </summary>
		partial void ExecuteDeletionSpecification(<#=e.Name#> <#=e.LowerName#>);
		
		/// <summary>  
		/// Deletes the <#=e.LowerName#>.
		/// </summary> 
		/// <param name="key">The key.</param> 
		public void Delete<#=e.Name#> (long key)
		{
			var <#=e.LowerName#> = Get<#=e.Name#>ByKey (key);
			ExecuteDeletionSpecification (<#=e.LowerName#>);

			m_repository.Remove (<#=e.LowerName#>);
			m_unitOfWork.Commit ();
		}
		#endregion
	}
}
<#
	}
});
#>

