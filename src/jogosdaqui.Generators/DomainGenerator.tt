<#@ include file="Config.tt" #>   
  
#region Usings    
using System;  
using System.Collections.Generic;    
using System.IO;        
using System.Linq;    
using Skahal.Infrastructure.Framework.Commons; 
using Skahal.Infrastructure.Framework.Domain;
using Skahal.Infrastructure.Framework.Repositories;
using HelperSharp; 
using KissSpecifications; 
#endregion          
         
<#     
RunForEachModel((e) =>  
{ 
	if(e.HasImplementedIRepository)    
	{    
#>     
namespace <#=e.Namespace#>
{  
	public partial interface I<#=e.Name#>Repository : IRepository<<#=e.Name#>, long>
	{
	<#
	foreach(var otherType in modelsType.Where(mt => mt != e.Type)) 
	{  
	break;
		var otherTypeProperties = otherType.GetProperties().Where(t1 => t1.PropertyType.IsGenericType).Distinct(); 
	
		foreach(var p in otherTypeProperties)
		{  
			if(p.PropertyType.IsGenericType) 
			{
				var propertyName = otherType.Name;	  
				var propertyType = p.PropertyType.GetGenericArguments()[0].Name;
				var argumentName = e.Name.ToLowerInvariant();
				
				if(propertyType.Equals(e.Type.Name)) 
				{  
#> 
		IList<<#=propertyName#>> FindAll<#=propertyName#>s(<#=propertyType#> <#=argumentName#>);
		int CountAll<#=propertyName#>s(<#=propertyType#> <#=argumentName#>);
	
<#				}
			}
		} 
	}   
#>
	}   

	// <summary>
	/// Domain layer <#=e.LowerName#> service.
	/// </summary>
	public partial class <#=e.Name#>Service : <#=GetDomainServiceInheritance(e)#>
	{ 
		#region Constructors 
      	/// <summary> 
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=e.PluralName#>. <#=e.Name#>Service"/> class.
		/// </summary>
		public  <#=e.Name#>Service()  
		{
		} 

		/// <summary>
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=e.PluralName#>. <#=e.Name#>Service"/> class.
		/// </summary>
		/// <param name="<#=e.LowerName#>Repository"> <#=e.Name#> repository.</param>
		/// <param name="unitOfWork">Unit of work.</param>
		public  <#=e.Name#>Service(I<#=e.Name#>Repository <#=e.LowerName#>Repository, IUnitOfWork<long> unitOfWork)
		: base(<#=e.LowerName#>Repository, unitOfWork)
		{
		}
        #endregion
		
		#region Methods
		
		/// <summary>
		/// Gets the <#=e.LowerName#> by key.
		/// </summary>
		/// <returns>The <#=e.LowerName#> by key.</returns>
		/// <param name="key">The key.</param>
		public <#=e.Name#> Get<#=e.Name#>ByKey(long key)
		{
			return MainRepository.FindAll (g => g.Key == key).FirstOrDefault ();
		}
		
		/// <summary>
		/// Gets all <#=e.PluralName#>. 
		/// </summary>
		/// <returns>The all <#=e.PluralName#>.</returns>
		public IList<<#=e.Name#>> GetAll<#=e.PluralName#>()
		{
			return MainRepository.FindAll(g => true).ToList();
		}
		
		/// <summary>
		/// Counts all <#=e.PluralName#>.
		/// </summary>
		public long CountAll<#=e.PluralName#>() 
		{ 
			return MainRepository.CountAll (g => true); 
		}

		/// <summary>
		/// Executes the save specification.
		/// </summary>
		partial void ExecuteSaveSpecification(<#=e.Name#> <#=e.ParameterName#>);
		
		/// <summary>
		/// Saves the <#=e.LowerName#>.
		/// </summary>
		/// <param name="<#=e.LowerName#>">The <#=e.LowerName#>.</param>
		public void Save<#=e.Name#>(<#=e.Name#> <#=e.ParameterName#>)
		{
			ExceptionHelper.ThrowIfNull ("<#=e.LowerName#>", <#=e.ParameterName#>);

			ExecuteSaveSpecification (<#=e.ParameterName#>);
			
			MainRepository [<#=e.ParameterName#>.Key] = <#=e.ParameterName#>;
			UnitOfWork.Commit (); 
		} 

		/// <summary> 
		/// Executes the delete specification.
		/// </summary>
		partial void ExecuteDeleteSpecification(long <#=e.LowerName#>Key, <#=e.Name#> <#=e.ParameterName#>);
		  
		/// <summary>  
		/// Deletes the <#=e.LowerName#>.
		/// </summary> 
		/// <param name="key">The key.</param> 
		public void Delete<#=e.Name#> (long key)
		{ 
			var <#=e.ParameterName#> = Get<#=e.Name#>ByKey (key);
			
			if(<#=e.ParameterName#> == null)
			{
				throw new ArgumentException("<#=e.Name#> with key '{0}' does not exists.".With(key));
			}
			
			ExecuteDeleteSpecification (key, <#=e.ParameterName#>);

			MainRepository.Remove (<#=e.ParameterName#>); 
			UnitOfWork.Commit ();
		}
		#endregion
	}
}
 
namespace <#=e.Namespace#>.Specifications 
{
	/// <summary>
	/// <#=e.Name#> exists specification.
	/// </summary>
	public class <#=e.Name#>ExistsSpecification : SpecificationBase<<#=e.Name#>>
	{
		#region Fields
		private long m_<#=e.LowerName#>Key;
		#endregion

		#region Constructors
		/// <summary>
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=e.PluralName#>.Specifications.<#=e.Name#>ExistsSpecification"/> class.
		/// </summary>
		/// <param name="<#=e.LowerName#>Key"><#=e.Name#> key.</param>
		public <#=e.Name#>ExistsSpecification(long <#=e.LowerName#>Key)
		{
			m_<#=e.LowerName#>Key = <#=e.LowerName#>Key;
		}
		#endregion 
  
		#region implemented abstract members of SpecificationBase
		/// <summary>
		/// Determines whether the target object satisfiy the specification.
		/// </summary>
		/// <param name="target">The target object to be validated.</param>
		/// <returns><c>true</c> if this instance is satisfied by the specified target; otherwise, <c>false</c>.</returns>
		public override bool IsSatisfiedBy (<#=e.Name#> target)
		{
			if(target == null)
			{
				NotSatisfiedReason = "<#=e.Name#> with key '{0}' does not exists.".With (m_<#=e.LowerName#>Key);
				return false;
			}

			return true;
		}

		#endregion
	}
}
<#
	}
});
#>

