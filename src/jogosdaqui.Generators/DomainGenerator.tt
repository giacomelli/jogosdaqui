<#@ template language="C#v3.5" #>
<#@ assembly name="$(SolutionDir)\jogosdaqui.Domain\bin\Debug\jogosdaqui.Domain.dll" #>
<#@ assembly name="$(SolutionDir)\references\Skahal.Infrastructure.Framework.dll" #>
<#@ import namespace="jogosdaqui.Domain.Games" #> 
<#@ import namespace="System.Reflection" #>  
<#@ import namespace="System.Linq" #>  
<#@ import namespace="Skahal.Infrastructure.Framework" #>
   
#region Usings   
using System;  
using System.Collections.Generic;    
using System.IO;    
using System.Linq;   
using jogosdaqui.Domain.Games; 
using Skahal.Infrastructure.Framework.Commons;
using Skahal.Infrastructure.Framework.Repositories;
using HelperSharp;
using KissSpecifications;
#endregion        

<#     
var modelsType = new Type[]     
{   
	typeof(Game),
	typeof(GameCategory)
};
#>    
 
 
<#
//////////////////////////////////////////// INTERFACE REPOSITORIES AND SERVICES CLASSES //////////////////////////////////////////// 
#>

	#region Services classes
<#
foreach(var t in modelsType) 
{  
	var modelName = t.Name;
	var lowerModelName = modelName.ToLowerInvariant();
	string modelPluralName; 
	  
	if(modelName.EndsWith("y"))
	{
		modelPluralName = modelName.Substring(0, modelName.Length - 1) + "ies";
	}   
	else
	{    
		modelPluralName = modelName + "s"; 
	}
	
	var implementsIRepository = Type.GetType(t.Namespace + ".I" + modelName + "Repository, jogosdaqui.Domain.dll") != null;

	if(implementsIRepository)
	{ 
#> 
namespace jogosdaqui.Domain.<#=modelPluralName#>
{
	public partial interface I<#=modelName#>Repository : IRepository<<#=modelName#>, long>
	{
	<#
	foreach(var otherType in modelsType.Where(mt => mt  != t)) 
	{  
		var otherTypeProperties = otherType.GetProperties().Where(t1 => t1.PropertyType.IsGenericType).Distinct(); 
	
		foreach(var p in otherTypeProperties)
		{  
			if(p.PropertyType.IsGenericType) 
			{
				var propertyName = otherType.Name;	 
				var propertyType = p.PropertyType.GetGenericArguments()[0].Name;
				var argumentName = modelName.ToLowerInvariant();
				
				if(propertyType.Equals(t.Name)) 
				{  
#> 
		IList<<#=propertyName#>> FindAll<#=propertyName#>s(<#=propertyType#> <#=argumentName#>);
		int CountAll<#=propertyName#>s(<#=propertyType#> <#=argumentName#>);
	
<#				}
			}
		}
	}  
#>
	}

	// <summary>
	/// Domain layer <#=lowerModelName#> service.
	/// </summary>
	public partial class <#=modelName#>Service
	{ 
		#region Fields	 
        private I<#=modelName#>Repository m_repository;
        private IUnitOfWork<long> m_unitOfWork; 
		#endregion 
		  
		#region Constructors 
      	/// <summary>
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=modelPluralName#>. <#=modelName#>Service"/> class.
		/// </summary>
		public  <#=modelName#>Service() 
			: this(DependencyService.Create<I<#=modelName#>Repository>(), DependencyService.Create<IUnitOfWork<long>>())
		{
		} 

		/// <summary>
		/// Initializes a new instance of the <see cref="jogosdaqui.Domain.<#=modelPluralName#>. <#=modelName#>Service"/> class.
		/// </summary>
		/// <param name="<#=lowerModelName#>Repository"> <#=modelName#> repository.</param>
		/// <param name="unitOfWork">Unit of work.</param>
		public  <#=modelName#>Service(I<#=modelName#>Repository <#=lowerModelName#>Repository, IUnitOfWork<long> unitOfWork)
		{
			m_repository = <#=lowerModelName#>Repository; 
			m_unitOfWork = unitOfWork;
			m_repository.SetUnitOfWork (m_unitOfWork);
		}
        #endregion
		
		#region Methods
		
		/// <summary>
		/// Gets the <#=lowerModelName#> by key.
		/// </summary>
		/// <returns>The <#=lowerModelName#> by key.</returns>
		/// <param name="key">The key.</param>
		public <#=modelName#> Get<#=modelName#>ByKey(long key)
		{
			return m_repository.FindAll (g => g.Key == key).FirstOrDefault ();
		}
		
		/// <summary>
		/// Gets all <#=modelPluralName#>. 
		/// </summary>
		/// <returns>The all <#=modelPluralName#>.</returns>
		public IList<<#=modelName#>> GetAll<#=modelPluralName#>()
		{
			return m_repository.FindAll(g => true).ToList();
		}
		
		/// <summary>
		/// Counts all <#=modelPluralName#>.
		/// </summary>
		public long CountAll<#=modelPluralName#>() 
		{ 
			return m_repository.CountAll (g => true); 
		}

		/// <summary>
		/// Saves the <#=lowerModelName#>.
		/// </summary>
		/// <param name="<#=lowerModelName#>">The <#=lowerModelName#>.</param>
		public void Save<#=modelName#>(<#=modelName#> <#=lowerModelName#>)
		{
			ExceptionHelper.ThrowIfNull ("<#=lowerModelName#>", <#=lowerModelName#>);

			m_repository [<#=lowerModelName#>.Key] = <#=lowerModelName#>;

			m_unitOfWork.Commit (); 
		}

		/// <summary>
		/// Executes the deletion specification.
		/// </summary>
		partial void ExecuteDeletionSpecification(<#=modelName#> <#=lowerModelName#>);
		
		/// <summary>  
		/// Deletes the <#=lowerModelName#>.
		/// </summary> 
		/// <param name="key">The key.</param> 
		public void Delete<#=modelName#> (long key)
		{
			var <#=lowerModelName#> = Get<#=modelName#>ByKey (key);
			ExecuteDeletionSpecification (<#=lowerModelName#>);

			m_repository.Remove (<#=lowerModelName#>);
			m_unitOfWork.Commit ();
		}
		#endregion
	}
	
<#
	}
}
#>
}
#endregion